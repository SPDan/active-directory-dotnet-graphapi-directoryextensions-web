@using Microsoft.WindowsAzure.ActiveDirectory.GraphClient;
@using OrgChart.Models;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;

@{
    ViewBag.Title = "Home Page";
}

@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@ViewBag.Title</h1>
                <h2>@ViewBag.Message</h2>
            </hgroup>
            <p>
                Queries TBD
            </p>
        </div>
    </section>
}

@functions {
    public void GenerateMap(ref string map, List<JObject> list, JObject registryUser)
    {
        foreach (JObject user in list)
        {
            // first two attributes are special cases (variable name and first field)
            if (map != "") { map += ","; }
            map += user["mailNickname"];
            map += ": { displayName: \"";
            map += user["displayName"];
            // enumerate remaining attributes from JSON object
            foreach (JProperty property in registryUser.Properties())
            {
                if (property.Name == "mailNickname" || property.Name == "displayName")
                {
                    // skip special cases
                }
                else if (property.Name.StartsWith(DirectoryExtensions.ExtensionPropertyPrefix) || Org.StandardAttributes().Contains(property.Name))
                {
                    map += "\", ";
                    map += property.Name;
                    map += ": \"";
                    map += user[property.Name];
                }
            }
            map += "\"}";
        }
    }
    public string GeneratePhotoLink(JObject user)
    {
        string strPhotoLink = null;
        string strUPN = (string)user["userPrincipalName"];
        // if msonlinesetup, use internal photos
        if(strUPN.Contains("msonline"))
        {
            strPhotoLink = String.Format("{0}{1}{2}", "http://who/photos/", user["mailNickname"], ".jpg");
        }
        // if dxtest, use externally visible photos
        else if (strUPN.Contains("dxtest") && !strUPN.Contains("admin"))
        {
            strPhotoLink = String.Format("{0}{1}{2}", "http://www.microsoft.com/global/en-us/news/publishingimages/exec/", user["mailNickname"], "_thumb.png");
        }
        // otherwise, use generic microsoft icon
        else
        {
            strPhotoLink = "http://www.microsoft.com/global/en-us/news/PublishingImages/HomePage/mobile_new.png";
        }
        return strPhotoLink;
    }
}

@if (ViewBag.AncestorsAndMainPerson != null)
{
<table id="Splitter">
<tr>
<table id="ManagerList">
	<tr>
		<th></th>
        <th>displayName (mailNickname)<br />jobTitle</th>
    </tr>
@for (int i = 0; i < ViewBag.AncestorsAndMainPerson.Count - 1; i++)
{
	<tr class="highlightable">
    @foreach (JObject user in ViewBag.AncestorsAndMainPerson[i])
    {
		<td style="display:none">@user["mailNickname"]</td>
        <td class="tdPersonDescription">
            <img style="MAX-WIDTH: 32px; VERTICAL-ALIGN: bottom; MARGIN: 1px 4px 0px 0px; MAX-HEIGHT: 24px" 
                 src=@GeneratePhotoLink(user) 
                 alt="@user["mailNickname"]"/>
        </td>
        <td class="tdPersonDescription">
            <a href="/?upn=@user["userPrincipalName"]">@user["displayName"]</a> 
            (@user["mailNickname"])<br />
            @user["jobTitle"]
        </td>
    }
	</tr>
}
</table>

<table id="MainPerson">
	<tr class="highlightable">
@{
List<List<JObject>> AncestorsAndMainPerson = ViewBag.AncestorsAndMainPerson;
if (AncestorsAndMainPerson.Count > 0)
{
    foreach (JObject user in ViewBag.AncestorsAndMainPerson[ViewBag.AncestorsAndMainPerson.Count - 1])
    {
		<td style="display:none">@user["mailNickname"]</td>
		<td class="tdPersonImage">
            <img style="MAX-WIDTH: 110px; VERTICAL-ALIGN: bottom; MARGIN: 8px 10px 8px 10px; MAX-HEIGHT: 100px" 
			     src=@GeneratePhotoLink(user) 
			     alt="@user["mailNickname"]"/>
		</td>
		<td class="tdPersonDescription">
            <a href="/?upn=@user["userPrincipalName"]">
                @user["displayName"]
            </a> 
            (@user["mailNickname"])<br />
            @user["jobTitle"]
            @if (user[DirectoryExtensions.GetExtensionName("skype")] != null)
            {
                <br />
                <script type="text/javascript" src="http://www.skypeassets.com/i/scom/js/skype-uri.js"></script>
                <div id="SkypeButton_Call_mailmongoose_1">
                <script type="text/javascript">
                    Skype.ui({
                        "name": "call",
                        "element": "SkypeButton_Call_mailmongoose_1",
                        "participants": ["@user[DirectoryExtensions.GetExtensionName("skype")]"],
                        "imageSize": 32
                    });
                </script>
                </div>
            }
		</td>
    }
}
}
    
	</tr>
</table>

<table id="OrgColumns">
<tr>
@{
int MAXROW = 9;
int nextRowStart = 0;
int count = ViewBag.DirectsOfDirects.Count;
for (int j = 0; j < ViewBag.DirectsOfDirects.Count; j++)
{
    List<JObject> directList = ViewBag.DirectsOfDirects[j];
    // at each row start, read ahead to fill in trio row if necessary and determine next row start
    if (j == nextRowStart)
    {
        // insert a row break if we are at the natural start of a new row
        if (j != 0)
        {
            @:</tr><tr>
        }
        // read ahead 9+1 directs to emit the row of spanning trio columns
        String previousTrio = null;
        String previousUPN = null;
        int colspan = 1;
        for (int k = j; k < count; k++)
        {
            // if we have now processed one more direct report than we want on a row, break out
            if ((k - j) > MAXROW)
            {
                break;
            }
            List<JObject> dirList = ViewBag.DirectsOfDirects[k];
            String newTrio = (String)dirList[0][DirectoryExtensions.GetExtensionName("trio")];
            String newUPN = (String)dirList[0]["userPrincipalName"];
            if (previousTrio == null)
            {
                // first pass, initialize previous trio
                previousTrio = newTrio;
                previousUPN = newUPN;
            }
            else if (newTrio == previousTrio)
            {
                // encountered repeat trio, increment colspan and add to UPN value
                colspan++;
                previousUPN += ",";
                previousUPN += newUPN;
                // allow row to extend to end of terminating sequence of non-trio leaders
                if (newTrio == "")
                {
                    if ((k - j) >= MAXROW)
                    {
                        // processing one past last item on prior row, start new row here (even if last in list)
                        nextRowStart = k;
                        break;
                    }
                    if (k == (count - 1))
                    {
                        // processing last in list, don't start new line
                        nextRowStart = k + 1;
                        break;
                    }
                }
            }
            if (newTrio != previousTrio || (k == (count - 1) && (k - j) < MAXROW))
            {
                // trio terminated by new trio or end of list (without exceeding max row length)
                if (previousTrio != "")  // CAN WE REMOVE THIS? WHEN WOULD IT HAPPEN?
                {
                    <td class="tdTrio" colspan ="@(colspan)">
                    <a class="tdTrio" href="/?upn=@previousUPN&trio=true">@previousTrio</a>
                    </td>
                }
                // if we are last in the list and have a trio that is different from previous, we are 1 member trio and terminator above won't get hit
                if (k == (count - 1) && newTrio != "" && newTrio != previousTrio)
                {
                    <td class="tdTrio" colspan = 1>
                    <a class="tdTrio" href="/?upn=@newUPN&trio=true">@newTrio</a>
                    </td>
                }
                // reset if terminated by new trio
                if (newTrio != previousTrio)
                {
                    // reset colspan
                    colspan = 1;
                    // next row starts here unless next trio completes before row termination
                    nextRowStart = k;
                    // store new trio
                    previousTrio = newTrio;
                    previousUPN = newUPN;
                }
                if (k == (count - 1) && (k - j) < MAXROW)
                {
                    // processing last in list, and the line isn't too long, don't start new line
                    nextRowStart = k + 1;
                }
            }
        }
        // insert a row break to close out spanning header column
        @:</tr><tr>
    }
    <td>
        <table>
        @foreach (JObject user in directList)
        {
            <tr class="highlightable">
            	<td style="display:none">@user["mailNickname"]</td>
                <td class="tdPersonImage">
                    <img style="MAX-WIDTH: 50px; VERTICAL-ALIGN: bottom; MARGIN: 4px 4px 4px 4px; MAX-HEIGHT: 52px" 
                            src=@GeneratePhotoLink(user) 
                            alt="@user["mailNickname"]"/>
                </td>
            	<td class = @((bool)user["isManager"] ? "tdManagerDescription" : "tdPersonDescription")>
                    <a href="/?upn=@user["userPrincipalName"]">@user["displayName"]</a> (@user["mailNickname"])<br />@user["jobTitle"]
            	</td>
            </tr>
        }
        </table>
    </td>
}
}
</tr>
</table>
</tr>
<tr>
<td>
<div style="text-align: center">
    <span style="color:red">
        @ViewBag.strErrors
    </span>
</div>
</td>
<td class="tdFormBackground">
	<form id="UserForm" action="/" method="post">
        <fieldset> <legend>Update/Delete/Create a User</legend>
			<!-- enumerate extension attributes from JSON object -->
            @foreach (JProperty property in ViewBag.ExtensionRegistryUser.Properties())
            {
                if (property.Name.StartsWith(DirectoryExtensions.ExtensionPropertyPrefix) || Org.StandardAttributes().Contains(property.Name))
                {
                    @:<div><label for="@property.Name"><pre>@property.Name: </pre></label> <input type="text" id="@property.Name" name="@property.Name"></div>
                }
            }			
    		<button type="submit" id="userCreate" name="submitButton" value="userCreate">Create</button>
            <button type="submit" id="userUpdate" name="submitButton" value="userUpdate">Update</button>
		    <button type="submit" id="userDelete" name="submitButton" value="userDelete">Delete</button>
		</fieldset>
	</form>
</td>
<td class="tdFormBackground">
	<form id="ExtensionForm" action="/" method="post">
        <fieldset> <legend>Create a String Extension Attribute on Users</legend>
            <div><label for="Extension"><pre>Extension: </pre></label> <input type="text" id="Extension" name="Extension"></div>
    		<button type="submit" id="extensionCreate" name="submitButton" value="extensionCreate">Create</button>
		</fieldset>
	</form>
</td>
<td class="tdFormBackground">
	<form id="ApplicationForm" action="/" method="post">
        <fieldset> <legend>Update Application Credentials</legend>
            <div><label for="ChooseCred"><pre>Choose Credential: </pre></label> 
                <select id="ChooseCred" name="ChooseCred">
                    <option value="dxtest orgchart" @(Org.WhichCred() == "dxtest orgchart" ? "selected" : "")>dxtest orgchart</option>
                    <option value="new" @(Org.WhichCred() == "new" ? "selected" : "")>new</option>
                </select>
                <input type="text" id="WhichCred" name="WhichCred" value="@Org.WhichCred()" readonly="readonly">
            </div>
            <div><label for="AppId"><pre>AppId: </pre></label> <input type="text" id="AppId" name="AppId" value="@StringConstants.ClientId"></div>
            <div><label for="AppSecret"><pre>AppSecret: </pre></label> <input type="text" id="AppSecret" name="AppSecret" value="@StringConstants.ClientSecret"></div>
            <div><label for="AppObjectId"><pre>AppObjectId: </pre></label> <input type="text" id="AppObjectId" name="AppObjectId" value="@StringConstants.AppObjectId"></div>
            <div><label for="AppTenant"><pre>AppTenant: </pre></label> <input type="text" id="AppTenant" name="AppTenant" value="@StringConstants.Tenant"></div>
            <button type="submit" id="applicationUpdate" name="submitButton" value="applicationUpdate">Update</button>
		</fieldset>
	</form>
</td>
</tr>
</table>
<script type="text/javascript">
    var userMap = {
        @{
            string strMap = "";
            for (int i = 0; i < ViewBag.AncestorsAndMainPerson.Count; i++)
            {
                GenerateMap(ref strMap, ViewBag.AncestorsAndMainPerson[i], ViewBag.ExtensionRegistryUser);
            }
            foreach (List<JObject> directList in ViewBag.DirectsOfDirects)
            {
                GenerateMap(ref strMap, directList, ViewBag.ExtensionRegistryUser);
            }
        }
        @MvcHtmlString.Create(strMap)
    };
    function CacheAppCreds() {
        // store creds from UI to localstorage
        var str = $("#ChooseCred option:selected").text();
        localStorage.setItem(str + "AppId", $("#AppId").val());
        localStorage.setItem(str + "AppSecret", $("#AppSecret").val());
        localStorage.setItem(str + "AppObjectId", $("#AppObjectId").val());
        localStorage.setItem(str + "AppTenant", $("#AppTenant").val());
    }
    function HoverOn(eventObject) {
        var $td = $("td:first", this);
        var alias = $td[0].textContent;
        var userFormAction = "/?upn=";
        userFormAction += userMap[alias].userPrincipalName;
        $("#UserForm").attr("action", userFormAction);
        // variable name is special case, enumerate variable attributes to update remaining fields
        $("#mailNickname").val(alias);
        @foreach (JProperty property in ViewBag.ExtensionRegistryUser.Properties())
        {
            if (property.Name == "mailNickname")
            {
                // skip special case
            }
            else if (property.Name.StartsWith(DirectoryExtensions.ExtensionPropertyPrefix) || Org.StandardAttributes().Contains(property.Name))
            {
                @:$("#@property.Name").val(userMap[alias].@property.Name);
            }
        }
    }
    function HoverOut(eventObject) {
        //leave text in input fields on losing focus
    }
    function SetEventHandlers() {
        $("#userPrincipalName").on("input", function () {
            var userFormAction = "/?upn=";
            userFormAction += this.value;
            $("#UserForm").attr("action", userFormAction);
        });
        $("#ChooseCred").change(function () {
            var str = "";
            $("#ChooseCred option:selected").each(function() {
                // display settings from localstorage corresponding to selected option
                str = $(this).text();
                $("#WhichCred").val(str);
                $("#AppId").val(localStorage.getItem(str + "AppId"));
                $("#AppSecret").val(localStorage.getItem(str + "AppSecret"));
                $("#AppObjectId").val(localStorage.getItem(str + "AppObjectId"));
                $("#AppTenant").val(localStorage.getItem(str + "AppTenant"));
            });
        });        
        $("#ApplicationForm").submit(function(event) {
            // store current creds in localstorage
            CacheAppCreds();
        });
    }
    function SetHoverActions() {
        $("tr.highlightable").hover(HoverOn, HoverOut);
    }
    window.document.body.onload = function () {
        SetHoverActions();
        SetEventHandlers();
        CacheAppCreds(); // store initial creds in local storage
    }
</script>
}